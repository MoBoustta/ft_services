apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  labels:
    app: mysql
spec:
  type: ClusterIP
  clusterIP: 10.102.44.148
  selector:
    app: mysql
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306

---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: mysql-deployment
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql-image
          imagePullPolicy: Never
          ports:
            - containerPort: 3306
            # Now, one of our containers can mount this volume
            # and use it like any other directory.
          volumeMounts:
            - name: mysql                 # name must match the volume name set at the pod level.
              mountPath: /var/lib/mysql   # Where to mount this directory in our container.
          livenessProbe:
            exec:
              command:
                - sh
                - health.sh
            initialDelaySeconds: 5
            periodSeconds: 1

      # Volumes are declared at the pod level. They share its
      # lifecycle and are communal across containers inside it.
      volumes:
        - name: mysql
          persistentVolumeClaim:
            claimName: mysql-pvc

---


# Declares a persistent volume is available for 
# pods to use as a long-term storage solution.
# This persistent volume is backed by your local
# minikube cluster.

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mysql-pvc
spec:
  # The list of ways the persistent volume can be mounted
  accessModes:
    - ReadWriteOnce
      # "Give me a persistent volume with at least
      # 256MB of space where I can read and write."
  resources:
    requests:
      storage: 256M
