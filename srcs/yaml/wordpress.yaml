# Services let you define networking rules for pods based on their labels.
# Whenever a pod with a matching label appears in the Kubernetes cluster,
# the service will detect it and start using it to handle network requests made to the service.

apiVersion: v1
kind: Service
metadata:                     # Metadata - Meta-information about the object itself
  name: wordpress-service     # Service name
  labels:                     # Define labels for the pod
    app: wordpress
  annotations:
    metallb.universe.tf/allow-shared-ip: unique-ip
spec:
  selector:
    app: wordpress
  ports:                  # Two types of ports for a service
    - name: wordpress
      port: 5050          # - port exposed internally in the cluster
      targetPort: 5050    # - the container port to send requests to
      protocol: TCP
  type: LoadBalancer

---

# A deployment is responsible for keeping a set of pods running.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deployment
  labels:
    app: wordpress

spec:
  replicas: 1     # How many pods we want to deploy.
                  # Equivalent to "select any pod where the label app = wordpress"
  selector:
    matchLabels:  # This matches against the labels we set on the pod!
      app: wordpress
  
  template:       # this template field is a regular pod configuration!
    metadata:
      # Set labels on the pod.
      # This is used in the deployment selector.
      labels:
        app: wordpress
    
    spec:
      containers:
      - name: wordpress           # Container name.
        image: wordpress-image    # Image name.
        imagePullPolicy: Never    # Tell k8s that we are using a local image.
        ports:                    # Expose ports.
        - containerPort: 5050
        livenessProbe:
          exec:
            command:
              - sh
              - health.sh
          initialDelaySeconds: 15
          periodSeconds: 3
